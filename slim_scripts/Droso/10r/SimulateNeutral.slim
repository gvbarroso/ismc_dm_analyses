// slim -m -d seed=42 -d rep=1 

initialize() {
  setSeed(seed);
  defineConstant("N", 10000);
  initializeTreeSeq(simplificationRatio=100);
  initializeMutationType("m1", 0.5, "f", 0); //Neutral mutations only
  initializeGenomicElementType("g1", m1, 1.0);
  //initializeMutationRate(1e-7);
  initializeMutationRate(0);

  // read Drosophila 2L map from Comeron et al. 2012
  lines = readFile("../Comeron_tables/Comeron_100kb_chr2L.txt");
  rates = NULL;
  ends = NULL;
  for (line in lines) {
    components = strsplit(line, "\t");
    ends = c(ends, asInteger(components[0])+100000);
    rates = c(rates, asFloat(components[1]));
  }
  rates = rates * 1e-7; //We multiply the rec rate by 10 to keep the u/r ratio constant
  ends = c(ends, asInteger(23.51e6));
  rates = c(rates, 0);
  initializeRecombinationRate(rates, ends);

  // read Drosophila 2L exon coordinates:
  lines = readFile("../GeneAnnotations/exons_chr2L.csv");
  for (line in lines) {
    components = strsplit(line, ",");
    a = asInteger(components[0]);
    b = asInteger(components[1]);
    initializeGenomicElement(g1, a, b);
  }

  // time recording:
  defineConstant("start", clock());
}

s1 20000 late() {
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
  sim.simulationFinished();
}

1 {
  print("Starting simulations...");
}

100 {
  print((clock() - start) + ": 100 generations done.");
}

1000 {
  print((clock() - start) + ": 1000 generations done.");
}

10000 {
  print((clock() - start) + ": 10000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

20000 {
  print((clock() - start) + ": 20000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

50000 {
  print((clock() - start) + ": 50000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

100000 {
  print((clock() - start) + ": 100000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

200000 {
  print((clock() - start) + ": 200000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

300000 {
  print((clock() - start) + ": 300000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

400000 {
  print((clock() - start) + ": 400000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

500000 {
  print((clock() - start) + ": 500000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

600000 {
  print((clock() - start) + ": 600000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

700000 {
  print((clock() - start) + ": 700000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

800000 {
  print((clock() - start) + ": 800000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

900000 {
  print((clock() - start) + ": 900000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}

1000000 {
  print((clock() - start) + ": 1000000 generations done.");
  sim.treeSeqOutput(paste0("dm2L_neutral_rep", rep, ".trees"));
}




1 {
  sim.addSubpop("p1", N);
  sim.rescheduleScriptBlock(s1, start=100*N, end=100*N);
}

